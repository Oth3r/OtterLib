plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id "com.gradleup.shadow"
}

version = "${project.mod_version}-fabric"
group = project.maven_group

base {
    archivesName = project.file_name
}

sourceSets {
    // Define a new sourceSet for the common code
    main {
        java {
            srcDir '../common/src/main/java'
        }
        resources {
            srcDir '../common/src/main/resources'
        }
    }
}

repositories {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

processResources {
    filteringCharset = "UTF-8"

    var replaceProperties = [
            version                : project.version,
            minecraft_version      : minecraft_version,
            min_minecraft_version  : min_minecraft_version,
            max_minecraft_version  : max_minecraft_version,
            loader_version         : loader_version
    ]

    inputs.properties replaceProperties
    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

shadowJar {
    from sourceSets.main.output
    configurations = [project.configurations.shadow]
    minimize()
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = file(shadowJar.archiveFile)
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = 'otterlib'
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

publishMods {
    changelog = file('../changelog.md').text
    type = BETA

    file = remapJar.archiveFile
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    version = mod_version
    displayName = mod_version+" [Fabric]"

    curseforge {
        accessToken = env.fetchOrNull('CURSEFORGE')
        projectId = "1257159"
        projectSlug = "otterlib"
        minecraftVersions.addAll(minecraft_versions.split(",").toList())

        requires("fabric-api")

        announcementTitle = "Download from CurseForge"
    }

    modrinth {
        accessToken = env.fetchOrNull('MODRINTH')
        projectId = "zVVpzurY"
        minecraftVersions.addAll(minecraft_versions.split(",").toList())

        requires("fabric-api")

        announcementTitle = "Download from Modrinth"
    }
}
